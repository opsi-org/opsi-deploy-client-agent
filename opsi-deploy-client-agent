#! /usr/bin/env python
# -*- coding: utf-8 -*-

# This tool is part of the desktop management solution opsi
# (open pc server integration) http://www.opsi.org
# Copyright (C) 2007-2015 uib GmbH <info@uib.de>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
opsi-deploy-client-agent

This script can be used to deploy the opsi-client-agent to systems
that are already running a Windows Operating System that has not been
installed via opsi.


:copyright: uib GmbH <info@uib.de>
:author: Jan Schneider <j.schneider@uib.de>
:author: Niko Wenselowski <n.wenselowski@uib.de>
:license: GNU Affero General Public License version 3
"""

import getpass
import inspect
import os
import re
import shutil
import socket
import sys
import threading
import time

from OPSI.Backend.BackendManager import BackendManager
from OPSI.Logger import Logger, LOG_WARNING, LOG_ERROR
from OPSI.Object import OpsiClient, ProductOnClient
from OPSI.System import copy, execute, getFQDN, umount, which
from OPSI.Types import forceHostId, forceInt, forceUnicode, forceUnicodeLower
from OPSI.Util import randomString
from OPSI.Util.File import IniFile

try:
	import argparse
except ImportError:
	from OPSI.Util import argparse

__version__ = '4.0.6.1'


logger = Logger()
logger.setConsoleLevel(LOG_WARNING)
logger.setLogFormat('[%L] %M')
logger.setConsoleColor(True)


def winexe(cmd, host, username, password):
	cmd = forceUnicode(cmd)
	host = forceUnicode(host)
	username = forceUnicode(username)
	password = forceUnicode(password)

	match = re.search('^([^\\\\]+)\\\\+([^\\\\]+)$', username)
	if match:
		username = match.group(1) + u'\\' + match.group(2)

	try:
		executable = which('winexe')
	except Exception as error:
		logger.debug('Getting winexe installed on system failed ({0}) Using local.'.format(error))
		executable = './winexe'

	return execute(u"%s -U '%s' //%s '%s'" % (executable, username + '%' + password.replace("'", "'\"'\"'"), host, cmd))


class DeployThread(threading.Thread):
	def __init__(self, host, backend, username, password, shutdown, reboot, startService, useNetbios, stopOnPingFailure, skipExistingClient, clientSideMount=True):
		threading.Thread.__init__(self)
		self.host = host
		self.backend = backend
		self.username = username
		self.password = password
		self.shutdown = shutdown
		self.reboot = reboot
		self.startService = startService
		self.useNetbios = useNetbios
		self.stopOnPingFailure = stopOnPingFailure
		self.skipExistingClient = skipExistingClient
		self.clientSideMount = clientSideMount

	def run(self):
		if self.clientSideMount:
			self._installWithClientSideMount()
		else:
			self._installWithServersideMount()

	def _installWithClientSideMount(self):
		logger.debug('Installing using client-side mount.')
		host = forceUnicodeLower(self.host)
		hostId = u''
		hostObj = None
		hostCreated = False
		try:
			hostName = host.split('.')[0]
			if (host.count(u'.') < 2):
				hostId = forceHostId(host.replace('_', '-') + u'.' + u'.'.join(getFQDN().split(u'.')[1:]))
			else:
				hostId = forceHostId(host.replace('_', '-'))

			if self.backend.host_getIdents(type='OpsiClient', id=hostId) and self.skipExistingClient:
				logger.notice(u"Skipping host '%s'" % hostId)
				return

			logger.notice(u"Starting deployment to host '%s'" % hostId)

			logger.notice(u"Querying for ip address of host '%s'" % hostId)
			ipAddress = u''
			logger.info(u"Getting host '%s' by name" % hostId)
			try:
				ipAddress = socket.gethostbyname(hostId)
			except Exception, e:
				logger.warning(u"Failed to get ip address for host '%s' by syscall: %s" % (hostId, e))

			if ipAddress:
				logger.notice(u"Got ip address '%s' from syscall" % ipAddress)
			else:
				logger.info(u"Executing 'nmblookup %s#20'" % hostName)
				for line in execute(u"nmblookup %s#20" % hostName):
					match = re.search("^(\d+\.\d+\.\d+\.\d+)\s+%s<20>" % hostName, line, re.IGNORECASE)
					if match:
						ipAddress = match.group(1)
						break
				if ipAddress:
					logger.notice(u"Got ip address '%s' from netbios lookup" % ipAddress)
				else:
					raise Exception(u"Failed to get ip address for host '%s'" % hostName)

			logger.notice(u"Pinging host %s ..." % ipAddress)
			alive = False
			try:
				for line in execute(u"ping -q -c2 %s" % ipAddress):
					match = re.search("\s+(\d+)%\s+packet\s+loss", line)
					if match and (forceInt(match.group(1)) < 100):
						alive = True
			except Exception, e:
				logger.error(e)
			if alive:
				logger.notice(u"Host %s is up" % ipAddress)
			elif self.stopOnPingFailure:
				raise Exception(u"No ping response received from %s" % ipAddress)
			else:
				logger.warning(u"No ping response received from %s" % ipAddress)

			logger.notice(u"Getting hardware ethernet address of host '%s'" % hostId)
			mac = u''
			f = open("/proc/net/arp")
			for line in f.readlines():
				line = line.strip()
				if not line:
					continue
				if (line.split()[0] == ipAddress):
					mac = line.split()[3].lower()
					break
			f.close()

			if not mac or (mac == u'00:00:00:00:00:00'):
				logger.warning(u"Failed to get hardware ethernet address for host '%s'" % hostName)
				mac = u''
			else:
				logger.notice(u"Found hardware ethernet address '%s'" % mac)

			if not self.backend.host_getIdents(type='OpsiClient', id=hostId):
				logger.notice(u"Creating client '%s'" % hostId)

				hostObj = OpsiClient(
					id=hostId,
					hardwareAddress=mac,
					ipAddress=ipAddress,
					description=u"",
					notes=u"Created by opsi-deploy-client-agent at %s" % time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
				)
				self.backend.host_createObjects([hostObj])
				hostCreated = True
			hostObj = self.backend.host_getObjects(type = 'OpsiClient', id = hostId)[0]

			hn = hostId
			if self.useNetbios:
				hn = hostName

			logger.notice(u"Testing winexe")
			cmd = u'cmd.exe /C "del /s /q c:\\tmp\\opsi-client-agent_inst && rmdir /s /q c:\\tmp\\opsi-client-agent_inst || echo not found"'
			for trynum in (1, 2):
				try:
					winexe(cmd, hn, self.username, self.password)
					break
				except Exception, e:
					if (trynum == 2):
						raise Exception(u"Failed to execute command on host '%s': winexe error: %s" % (hn, e))
					logger.info(u"Winexe failure '%s', retrying" % e)
					time.sleep(2)

			logger.notice(u"Patching config.ini")
			configIniName = u'%s_config.ini' % randomString(10)
			copy(os.path.join(u'files', u'opsi', u'cfg', u'config.ini'), '/tmp/%s' % configIniName)
			configFile = IniFile('/tmp/%s' % configIniName)
			config = configFile.parse()
			if not config.has_section('shareinfo'):
				config.add_section('shareinfo')
			config.set('shareinfo', 'pckey', hostObj.opsiHostKey)
			if not config.has_section('general'):
				config.add_section('general')
			config.set('general', 'dnsdomain', u'.'.join(hostObj.id.split('.')[1:]))
			configFile.generate(config)

			try:
				logger.notice(u"Copying installation files")
				cmd = u"%s //%s/c$ -U '%s' -c 'prompt; recurse; md tmp; cd tmp; md opsi-client-agent_inst; cd opsi-client-agent_inst; mput files; mput utils; cd files\\opsi\\cfg; lcd /tmp; put %s config.ini; exit;'" \
					% (which('smbclient'), hn, self.username + '%' + self.password.replace("'", "'\"'\"'"), configIniName)
				execute(cmd)

				logger.notice(u"Installing opsi-client-agent")
				cmd = u'c:\\tmp\\opsi-client-agent_inst\\files\\opsi\\opsi-winst\\winst32.exe /batch c:\\tmp\\opsi-client-agent_inst\\files\\opsi\\setup.ins c:\\tmp\\opsi-client-agent.log /PARAMETER REMOTEDEPLOY'
				for trynum in (1, 2):
					try:
						winexe(cmd, hn, self.username, self.password)
						break
					except Exception, e:
						if (trynum == 2):
							raise Exception(u"Failed to install opsi-client-agent: %s" % e)
						logger.info(u"Winexe failure '%s', retrying" % e)
						time.sleep(2)
			finally:
				os.remove('/tmp/%s' % configIniName)

				try:
					cmd = u'cmd.exe /C "del /s /q c:\\tmp\\opsi-client-agent_inst && rmdir /s /q c:\\tmp\\opsi-client-agent_inst"'
					winexe(cmd, hn, self.username, self.password)
				except Exception, e:
					logger.error(e)

			logger.notice(u"opsi-client-agent successfully installed on '%s'" % hostId)
			self.backend.productOnClient_updateObjects([
					ProductOnClient(
						productType=u'LocalbootProduct',
						clientId=hostId,
						productId=u'opsi-client-agent',
						installationStatus=u'installed',
						actionResult=u'successful'
					)
				])

			if self.reboot or self.shutdown:
				cmd = u''
				if self.reboot:
					logger.notice(u"Rebooting machine '%s'" % hostId)
					cmd = u'"%ProgramFiles%\\opsi.org\\opsi-client-agent\\utilities\\shutdown.exe" /L /R /T:20 "opsi-client-agent installed - reboot" /Y /C'
				elif self.shutdown:
					logger.notice(u"Shutting down machine '%s'" % hostId)
					cmd = u'"%ProgramFiles%\\opsi.org\\opsi-client-agent\\utilities\\shutdown.exe" /L /T:20 "opsi-client-agent installed - shutdown" /Y /C'
				try:
					pf = None
					for const in ('%ProgramFiles(x86)%', '%ProgramFiles%'):
						lines = []
						try:
							lines = winexe(u'cmd.exe /C "echo %s"' % const, hn, self.username, self.password)
						except Exception, e:
							logger.warning(e)
							continue
						for line in lines:
							line = line.strip()
							if (line.find('unavailable') != -1):
								continue
							pf = line
						if pf and (pf != const):
							break
						pf = None
					if not pf:
						raise Exception(u"Failed to get program files path")
					logger.info(u"Program files path is '%s'" % pf)
					winexe(cmd.replace(u'%ProgramFiles%', pf), hn, self.username, self.password)
				except Exception, e:
					if self.reboot:
						logger.error(u"Failed to reboot computer: %s" % e)
					else:
						logger.error(u"Failed to shutdown computer: %s" % e)
			elif self.startService:
				try:
					winexe(u'net start opsiclientd', hn, self.username, self.password)
				except Exception, e:
					logger.error(u"Failed to start opsiclientd: %s" % e)

		except Exception, e:
			logger.error(u"Deployment to '%s' failed: %s" % (hostId, e))
			if hostObj and hostCreated:
				try:
					self.backend.host_deleteObjects([hostObj])
				except Exception, e2:
					logger.error(e2)

	def _installWithServersideMount(self):
		logger.debug('Installing using server-side mount.')
		host = forceUnicodeLower(self.host)
		hostId = u''
		hostObj = None
		mountDir = u''
		instDir = u''
		hostCreated = False
		mountDirCreated = False
		instDirCreated = False
		mounted = False
		try:
			if (host.count(u'.') < 2):
				hostId = forceHostId(host + u'.' + u'.'.join(getFQDN().split(u'.')[1:]))
			else:
				hostId = forceHostId(host)
			hostName = hostId.split('.')[0]

			if self.backend.host_getIdents(type='OpsiClient', id=hostId) and self.skipExistingClient:
				logger.notice(u"Skipping host '%s'" % hostId)
				return

			logger.notice(u"Starting deployment to host '%s'" % hostId)

			logger.notice(u"Querying for ip address of host '%s'" % hostId)
			ipAddress = u''
			logger.info(u"Getting host '%s' by name" % hostId)
			try:
				ipAddress = socket.gethostbyname(hostId)
			except Exception, e:
				logger.warning(u"Failed to get ip address for host '%s' by syscall: %s" % (hostId, e))

			if ipAddress:
				logger.notice(u"Got ip address '%s' from syscall" % ipAddress)
			else:
				logger.info(u"Executing 'nmblookup %s#20'" % hostName)
				for line in execute(u"nmblookup %s#20" % hostName):
					match = re.search("^(\d+\.\d+\.\d+\.\d+)\s+%s<20>" % hostName, line, re.IGNORECASE)
					if match:
						ipAddress = match.group(1)
						break
				if ipAddress:
					logger.notice(u"Got ip address '%s' from netbios lookup" % ipAddress)
				else:
					raise Exception(u"Failed to get ip address for host '%s'" % hostName)

			logger.notice(u"Pinging host %s ..." % ipAddress)
			alive = False
			try:
				for line in execute(u"ping -q -c2 %s" % ipAddress):
					match = re.search("\s+(\d+)%\s+packet\s+loss", line)
					if match and (forceInt(match.group(1)) < 100):
						alive = True
			except Exception, e:
				logger.error(e)
			if alive:
				logger.notice(u"Host %s is up" % ipAddress)
			elif self.stopOnPingFailure:
				raise Exception(u"No ping response received from %s" % ipAddress)
			else:
				logger.warning(u"No ping response received from %s" % ipAddress)

			logger.notice(u"Getting hardware ethernet address of host '%s'" % hostId)
			mac = u''
			f = open("/proc/net/arp")
			for line in f.readlines():
				line = line.strip()
				if not line:
					continue
				if (line.split()[0] == ipAddress):
					mac = line.split()[3].lower()
					break
			f.close()

			if not mac or (mac == u'00:00:00:00:00:00'):
				logger.warning(u"Failed to get hardware ethernet address for host '%s'" % hostName)
				mac = u''
			else:
				logger.notice(u"Found hardware ethernet address '%s'" % mac)

			if not self.backend.host_getIdents(type='OpsiClient', id=hostId):
				logger.notice(u"Creating client '%s'" % hostId)

				hostObj = OpsiClient(
					id=hostId,
					hardwareAddress=mac,
					ipAddress=ipAddress,
					description=u"",
					notes=u"Created by opsi-deploy-client-agent at %s" % time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
				)
				self.backend.host_createObjects([hostObj])
				hostCreated = True
			hostObj = self.backend.host_getObjects(type='OpsiClient', id=hostId)[0]

			mountDir = os.path.join(u'/tmp', u'mnt_' + randomString(10))
			instDirName = u'opsi_' + randomString(10)
			instDir = os.path.join(mountDir, instDirName)

			os.makedirs(mountDir)
			mountDirCreated = True

			logger.notice(u"Mounting c$ share")
			try:
				try:
					if self.useNetbios:
						if "timeout" in inspect.getargspec(execute)[0]:
							execute(u"%s -t cifs -o'username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostName, mountDir), timeout = 15)
						else:
							execute(u"%s -t cifs -o'username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostName, mountDir))
					else:
						if "timeout" in inspect.getargspec(execute)[0]:
							execute(u"%s -t cifs -o'username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostId, mountDir), timeout = 15)
						else:
							execute(u"%s -t cifs -o'username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostId, mountDir))
				except Exception, e:
					logger.info(u"Failed to mount clients c$ share: %s, retrying with port 139" % e)
					if self.useNetbios:
						if "timeout" in inspect.getargspec(execute)[0]:
							execute(u"%s -t cifs -o'port=139,username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostName, mountDir), timeout = 15)
						else:
							execute(u"%s -t cifs -o'port=139,username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostName, mountDir))
					else:
						if "timeout" in inspect.getargspec(execute)[0]:
							execute(u"%s -t cifs -o'port=139,username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostId, mountDir), timeout = 15)
						else:
							execute(u"%s -t cifs -o'port=139,username=%s,password=%s' //%s/c$ %s" \
								% (which('mount'), self.username, self.password.replace("'", "'\"'\"'"), hostId, mountDir))
			except Exception, e:
				raise Exception(u"Failed to mount c$ share: %s\nPerhaps you have to disable the firewall or simple file sharing on the windows machine (folder options)?" % e)

			mounted = True

			logger.notice(u"Copying installation files")

			os.makedirs(instDir)
			instDirCreated = True

			copy(u'files', instDir)
			copy(u'utils', instDir)

			logger.notice(u"Patching config.ini")
			configFile = IniFile(os.path.join(instDir, u'files', u'opsi', u'cfg', u'config.ini'))
			config = configFile.parse()
			if not config.has_section('shareinfo'):
				config.add_section('shareinfo')
			config.set('shareinfo', 'pckey', hostObj.opsiHostKey)
			if not config.has_section('general'):
				config.add_section('general')
			config.set('general', 'dnsdomain', u'.'.join(hostObj.id.split('.')[1:]))
			configFile.generate(config)

			logger.notice(u"Installing opsi-client-agent")
			if not os.path.exists(os.path.join(mountDir, 'tmp')):
				os.makedirs(os.path.join(mountDir, 'tmp'))
			cmd = u'c:\\%s\\files\\opsi\\opsi-winst\\winst32.exe /batch c:\\%s\\files\\opsi\\setup.ins c:\\tmp\\opsi-client-agent.log /PARAMETER REMOTEDEPLOY' % (instDirName, instDirName)
			for trynum in (1, 2):
				try:
					if self.useNetbios:
						winexe(cmd, hostName, self.username, self.password)
					else:
						winexe(cmd, hostId, self.username, self.password)
					break
				except Exception, e:
					if (trynum == 2):
						raise Exception(u"Failed to install opsi-client-agent: %s" % e)
					logger.info(u"Winexe failure '%s', retrying" % e)
					time.sleep(2)

			logger.notice(u"Cleaning up")
			shutil.rmtree(instDir)
			instDir = None
			umount(mountDir)
			mounted = False
			os.rmdir(mountDir)
			mountDir = None

			logger.notice(u"opsi-client-agent successfully installed on '%s'" % hostId)
			self.backend.productOnClient_updateObjects([
					ProductOnClient(
						productType=u'LocalbootProduct',
						clientId=hostId,
						productId=u'opsi-client-agent',
						installationStatus=u'installed',
						actionResult=u'successful'
					)
				])

			if self.reboot or self.shutdown:
				cmd = u''
				if self.reboot:
					logger.notice(u"Rebooting machine '%s'" % hostId)
					cmd = u'"%ProgramFiles%\\opsi.org\\opsi-client-agent\\utilities\\shutdown.exe" /L /R /T:20 "opsi-client-agent installed - reboot" /Y /C'
				elif self.shutdown:
					logger.notice(u"Shutting down machine '%s'" % hostId)
					cmd = u'"%ProgramFiles%\\opsi.org\\opsi-client-agent\\utilities\\shutdown.exe" /L /T:20 "opsi-client-agent installed - shutdown" /Y /C'
				try:
					pf = None
					for const in ('%ProgramFiles(x86)%', '%ProgramFiles%'):
						lines = []
						try:
							if self.useNetbios:
								lines = winexe(u'cmd.exe /C "echo %s"' % const, hostName, self.username, self.password)
							else:
								lines = winexe(u'cmd.exe /C "echo %s"' % const, hostId, self.username, self.password)
						except Exception, e:
							logger.warning(e)
							continue
						for line in lines:
							line = line.strip()
							if (line.find('unavailable') != -1):
								continue
							pf = line
						if pf and (pf != const):
							break
						pf = None
					if not pf:
						raise Exception(u"Failed to get program files path")
					logger.info(u"Program files path is '%s'" % pf)
					if self.useNetbios:
						winexe(cmd.replace(u'%ProgramFiles%', pf), hostName, self.username, self.password)
					else:
						winexe(cmd.replace(u'%ProgramFiles%', pf), hostId, self.username, self.password)
				except Exception, e:
					if self.reboot:
						logger.error(u"Failed to reboot computer: %s" % e)
					else:
						logger.error(u"Failed to shutdown computer: %s" % e)
			elif self.startService:
				if self.useNetbios:
					winexe(u'net start opsiclientd', hostName, self.username, self.password)
				else:
					winexe(u'net start opsiclientd', hostId, self.username, self.password)

		except Exception, e:
			logger.error(u"Deployment to '%s' failed: %s" % (hostId, e))
			if hostObj and hostCreated:
				try:
					self.backend.host_deleteObjects([hostObj])
				except Exception, e2:
					logger.error(e2)
			if instDir and instDirCreated:
				try:
					shutil.rmtree(instDir)
				except Exception, e2:
					logger.error(e2)
			if mountDir and mounted:
				try:
					umount(mountDir)
				except Exception, e2:
					logger.error(e2)
			if mountDir and mountDirCreated:
				try:
					os.rmdir(mountDir)
				except Exception, e2:
					logger.error(e2)


def main(argv):
	parser = argparse.ArgumentParser(
		description=(
			u"Deploy opsi client agent to the specified clients.\n"
			u"The c$ and admin$ must be accessable on every client.\n"
			u"Simple File Sharing (Folder Options) should be disabled on the Windows machine."
		)
	)
	parser.add_argument('-V', action='version', version=__version__)
	parser.add_argument('-v', dest="logLevel", default=LOG_WARNING, action="count",
						help="increase verbosity (can be used multiple times)")
	parser.add_argument('-u', dest="username", default=u"Administrator",
						help=(
							u'username for authentication (default: Administrator).\n'
							u"example for a domain account: -u \"<DOMAIN>\\\\<username>\""
							)
						)
	parser.add_argument('-p', dest="password", default=u"",
						help=u"password for authentication")
	parser.add_argument('-c', dest="useNetbios", default=True,
						action="store_false",
						help=u"use fqdn instead of hostname for smb/cifs connection")
	parser.add_argument('-x', dest="stopOnPingFailure", default=True,
						action="store_false",
						help=u"try installation even if ping fails")
	parser.add_argument('-r', dest="reboot", default=False, action="store_true",
						help=u"reboot computer after installation")
	parser.add_argument('-s', dest="shutdown", default=False,
						action="store_true",
						help=u"shutdown computer after installation")
	parser.add_argument('-o', dest="startService", default=False,
						action="store_true",
						help=u"start opsiclientd service after installation")
	parser.add_argument('-f', dest="hostFile", default=None,
						help=u"file containing list of clients (one hostname per line)")
	parser.add_argument('-S', dest="skipExistingClient", default=False,
						action="store_true",
						help=u"skip known opsi clients")
	parser.add_argument('-t', dest="maxThreads", default=1, type=int,
						help=u"number of concurrent deployment threads")
	parser.add_argument('--server-side-mount', dest="clientSideMount",
						default=True, action="store_false",
						help=u"Mount the client's C$-share on the server for copying the files. This imitates the behaviour of the old script.")
	parser.add_argument('host', dest="hosts", action="append",
						nargs=argparse.REMAINDER,
						help='The hosts to deploy the opsi-client-agent to.')

	args = parser.parse_args(argv)

	logger.setConsoleLevel(args.logLevel)

	# TODO: check how we can handle hosts
	hosts = list(args.hosts)
	if args.hostFile:
		if not os.path.isfile(args.hostFile):
				raise Exception(u"File '%s' not found!" % args.hostFile)

		with open(args.hostFile) as f:
			for line in f:
				line = line.strip()
				if not line or line.startswith('#') or line.startswith(';'):
					continue

				hosts.append(forceUnicodeLower(line))

	if not hosts:
		raise Exception("No hosts given.")

	password = args.password
	if not password:
		password = forceUnicode(getpass.getpass())
		if not password:
			raise Exception("No password given.")

	logger.addConfidentialString(password)

	maxThreads = forceInt(args.maxThreads)
	if maxThreads < 1:
		maxThreads = 1

	if not args.clientSideMount:
		if os.getuid() != 0:
			raise Exception("You have to be root to use server-side-mouting.")

	# Create BackendManager
	backend = BackendManager(
		dispatchConfigFile=u'/etc/opsi/backendManager/dispatch.conf',
		backendConfigDir=u'/etc/opsi/backends',
		extend=True,
		depotbackend=False,
		hostControlBackend=False
	)
	runningThreads = []
	while hosts:
		while (len(runningThreads) > maxThreads):
			time.sleep(1)
			for t in runningThreads:
				if t.isAlive():
					continue
				runningThreads.remove(t)
				break
		host = hosts.pop()
		t = DeployThread(host, backend,
			args.username,
			password,
			args.shutdown,
			args.reboot,
			args.startService,
			args.useNetbios,
			args.stopOnPingFailure,
			args.skipExistingClient,
			args.clientSideMount
		)
		t.start()
		runningThreads.append(t)
		time.sleep(0.5)

	for t in runningThreads:
		if t.isAlive():
			t.join()


if (__name__ == "__main__"):
	try:
		os.chdir(os.path.dirname(os.path.abspath(__file__)))
		main(sys.argv[1:])
	except Exception as e:
		logger.setConsoleLevel(LOG_ERROR)
		logger.logException(e)
		print >> sys.stderr, u"ERROR: %s" % forceUnicode(e)
		sys.exit(1)

	sys.exit(0)
